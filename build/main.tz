{ parameter
    (or (or (pair %deposit (nat %amount) (address %token_type)) (int %getStorage))
        (pair %submit (nat %block_number) (string %root))) ;
  storage
    (pair (pair (pair (map %branches
                         address
                         (pair (pair (map %checkpoints
                                        bytes
                                        (pair (pair %state_update
                                                 (pair (address %deposit_address) (nat %plasma_block_number))
                                                 (pair (pair %property (map %inputs nat string) (address %predicate_address))
                                                       (pair %range (nat %end_) (nat %start_))))
                                              (pair %subrange (nat %end_) (nat %start_))))
                                     (map %claims
                                        string
                                        (pair (pair (nat %decided_after) (nat %num_proven_contradictions))
                                              (pair %property (map %inputs nat string) (address %predicate_address)))))
                               (pair (map %deposited_ranges nat (pair (nat %end_) (nat %start_)))
                                     (nat %total_deposited))))
                      (map %commitments nat string))
                (pair (nat %current_block)
                      (map %events
                         nat
                         (map string
                              (list (pair (nat %block_height)
                                          (or %data (pair %depositedEvent address nat) (pair %submittedEvent nat string))))))))
          (address %operator_address)) ;
  code { DUP ;
         CDR ;
         DIP { DUP } ;
         SWAP ;
         CAR ;
         IF_LEFT
           { DUP ;
             IF_LEFT
               { DUP ;
                 DIP { DIP 2 { DUP } ; DIG 2 } ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 DIP { DUP } ;
                 SWAP ;
                 CDR ;
                 DIP { DUP } ;
                 SWAP ;
                 CAR ;
                 PUSH nat 0 ;
                 SWAP ;
                 COMPARE ;
                 LE ;
                 IF { PUSH string "Insufficient fund" ; FAILWITH } { PUSH unit Unit } ;
                 DROP ;
                 DIP { DUP } ;
                 SWAP ;
                 CDR ;
                 DIP { DUP ; CAR ; CAR ; CAR } ;
                 GET ;
                 IF_NONE { PUSH string "GET_FORCE" ; FAILWITH } {} ;
                 SOURCE ;
                 CONTRACT unit ;
                 IF_NONE { PUSH string "bad address for get_contract" ; FAILWITH } {} ;
                 DUP ;
                 AMOUNT ;
                 UNIT ;
                 TRANSFER_TOKENS ;
                 DUP ;
                 NIL operation ;
                 SWAP ;
                 CONS ;
                 DIP 3 { DUP } ;
                 DIG 3 ;
                 CDR ;
                 CDR ;
                 DIP { DIP 5 { DUP } ; DIG 5 ; CAR } ;
                 ADD ;
                 DIP { DIP 3 { DUP } ; DIG 3 ; CDR ; CDR } ;
                 PAIR ;
                 DIP 6 { DUP } ;
                 DIG 6 ;
                 CDR ;
                 DIP { DIP 5 { DUP } ; DIG 5 ; CAR ; CDR ; CAR } ;
                 PAIR ;
                 DIP { PUSH string "tz1OwnerN5GSez2ndXXeDX6LgUDvLzPLqgYV" ;
                       SOME ;
                       EMPTY_MAP nat string ;
                       SWAP ;
                       PUSH nat 0 ;
                       UPDATE ;
                       PUSH address "tz1TGu6TN5GSez2ndXXeDX6LgUDvLzPLqgYV" ;
                       SWAP ;
                       PAIR ;
                       DIP { DUP } ;
                       PAIR } ;
                 PAIR ;
                 DIP 6 { DUP } ;
                 DIG 6 ;
                 DIP { DIP 7 { DUP } ; DIG 7 } ;
                 PAIR ;
                 DIP { DUP } ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 CAR ;
                 DIP { DUP } ;
                 SWAP ;
                 CAR ;
                 CDR ;
                 DIP 2 { DUP } ;
                 DIG 2 ;
                 CDR ;
                 DIP { DUP } ;
                 SWAP ;
                 CDR ;
                 DIP { DIP 2 { DUP } ; DIG 2 ; CAR ; CAR ; CAR } ;
                 GET ;
                 IF_NONE { PUSH string "GET_FORCE" ; FAILWITH } {} ;
                 DIP { DUP } ;
                 SWAP ;
                 DIP { DIP { DUP } ; SWAP ; CDR ; CDR } ;
                 PAIR ;
                 DUP ;
                 PACK ;
                 SHA256 ;
                 DUP ;
                 DIP { DIP { DUP } ;
                       SWAP ;
                       SOME ;
                       DIP { DIP 2 { DUP } ; DIG 2 ; CAR ; CAR } } ;
                 UPDATE ;
                 DIP { DIP 2 { DUP } ; DIG 2 ; DUP ; CDR ; SWAP ; CAR ; CDR } ;
                 PAIR ;
                 PAIR ;
                 DIP 3 { DROP } ;
                 DUG 2 ;
                 DIP 4 { DUP } ;
                 DIG 4 ;
                 CDR ;
                 DIP { DIP 2 { DUP } ;
                       DIG 2 ;
                       SOME ;
                       DIP { DIP 5 { DUP } ; DIG 5 ; CAR ; CAR ; CAR } } ;
                 UPDATE ;
                 DIP { DIP 5 { DUP } ;
                       DIG 5 ;
                       DUP ;
                       CDR ;
                       SWAP ;
                       CAR ;
                       DUP ;
                       CDR ;
                       SWAP ;
                       CAR ;
                       CDR } ;
                 PAIR ;
                 PAIR ;
                 PAIR ;
                 DIP 6 { DROP } ;
                 DUG 5 ;
                 DIP 5 { DUP } ;
                 DIG 5 ;
                 DIP { DROP 7 ; DIP 6 { DUP } ; DIG 6 ; DROP } ;
                 DIP 7 { DROP } ;
                 DUG 6 ;
                 DIP 6 { DUP } ;
                 DIG 6 ;
                 DIP { DIP 7 { DUP } ; DIG 7 } ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 DIP { DUP } ;
                 SWAP ;
                 CDR ;
                 DUP ;
                 CDR ;
                 DIP { DIP { DUP } ; SWAP ; CAR ; CAR ; CAR } ;
                 GET ;
                 IF_NONE { PUSH string "GET_FORCE" ; FAILWITH } {} ;
                 DUP ;
                 CDR ;
                 CDR ;
                 DIP { DUP ; CDR ; CAR } ;
                 GET ;
                 IF_NONE { PUSH bool True } { DROP ; PUSH bool False } ;
                 DUP ;
                 IF { PUSH string "No range found for the old total_deposited." ; FAILWITH }
                    { PUSH unit Unit } ;
                 DROP ;
                 DIP { DUP } ;
                 SWAP ;
                 CDR ;
                 CDR ;
                 DIP { DIP { DUP } ; SWAP ; CDR ; CAR } ;
                 GET ;
                 IF_NONE { PUSH string "GET_FORCE" ; FAILWITH } {} ;
                 DUP ;
                 CDR ;
                 DIP { DUP } ;
                 SWAP ;
                 CAR ;
                 PUSH nat 0 ;
                 DIP 5 { DUP } ;
                 DIG 5 ;
                 CDR ;
                 CAR ;
                 DIP 3 { DUP } ;
                 DIG 3 ;
                 PUSH nat 0 ;
                 SWAP ;
                 COMPARE ;
                 EQ ;
                 DIP { DIP 2 { DUP } ; DIG 2 ; PUSH nat 0 ; SWAP ; COMPARE ; EQ } ;
                 AND ;
                 IF { DIP 6 { DUP } ;
                      DIG 6 ;
                      CDR ;
                      CDR ;
                      DIP { DIP { DUP } ; SWAP ; DROP } ;
                      SWAP ;
                      DIP { DIP { DROP } } ;
                      PUSH unit Unit }
                    { DIP 3 { DUP } ;
                      DIG 3 ;
                      DIP { DIP { DUP } ; SWAP ; DROP } ;
                      SWAP ;
                      DIP { DIP { DROP } } ;
                      PUSH unit Unit } ;
                 DROP ;
                 DIP { DUP } ;
                 SWAP ;
                 DIP { DIP 7 { DUP } ; DIG 7 ; CAR } ;
                 ADD ;
                 DIP 7 { DUP } ;
                 DIG 7 ;
                 CDR ;
                 CDR ;
                 DIP { DIP 8 { DUP } ; DIG 8 ; CAR } ;
                 ADD ;
                 DIP { DIP 7 { DUP } ; DIG 7 ; DUP ; CAR ; SWAP ; CDR ; CAR } ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 DIP 8 { DROP } ;
                 DUG 7 ;
                 DUP ;
                 DIP { DIP 2 { DUP } ; DIG 2 } ;
                 PAIR ;
                 DIP { DUP } ;
                 SWAP ;
                 DIP { DUP ; SOME ; DIP { DIP 2 { DUP } ; DIG 2 } } ;
                 UPDATE ;
                 DIP { DIP 2 { DUP } ; DIG 2 ; DROP } ;
                 DIP 3 { DROP } ;
                 DUG 2 ;
                 DIP 4 { DUP } ;
                 DIG 4 ;
                 DIP { DIP 2 { DUP } ; DIG 2 ; NONE (pair (nat %end_) (nat %start_)) } ;
                 UPDATE ;
                 DIP { DIP 2 { DUP } ; DIG 2 ; DROP } ;
                 DIP 3 { DROP } ;
                 DUG 2 ;
                 DIP 2 { DUP } ;
                 DIG 2 ;
                 DIP { DIP 8 { DUP } ; DIG 8 ; DUP ; CAR ; SWAP ; CDR ; CDR } ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 DIP 9 { DROP } ;
                 DUG 8 ;
                 DIP 9 { DUP } ;
                 DIG 9 ;
                 CDR ;
                 DIP { DIP 8 { DUP } ;
                       DIG 8 ;
                       SOME ;
                       DIP { DIP 10 { DUP } ; DIG 10 ; CAR ; CAR ; CAR } } ;
                 UPDATE ;
                 DIP { DIP 10 { DUP } ;
                       DIG 10 ;
                       DUP ;
                       CDR ;
                       SWAP ;
                       CAR ;
                       DUP ;
                       CDR ;
                       SWAP ;
                       CAR ;
                       CDR } ;
                 PAIR ;
                 PAIR ;
                 PAIR ;
                 DIP 11 { DROP } ;
                 DUG 10 ;
                 DIP 10 { DUP } ;
                 DIG 10 ;
                 DIP { DROP 12 ; DIP 6 { DUP } ; DIG 6 ; DROP } ;
                 DIP 7 { DROP } ;
                 DUG 6 ;
                 DIP 7 { DUP } ;
                 DIG 7 ;
                 CDR ;
                 DIP { DIP 7 { DUP } ; DIG 7 ; CAR } ;
                 PAIR ;
                 LEFT (pair nat string) ;
                 DIP 7 { DUP } ;
                 DIG 7 ;
                 PUSH string "Deposited" ;
                 SWAP ;
                 PAIR ;
                 DIP { DUP } ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 CAR ;
                 DIP { DUP } ;
                 SWAP ;
                 CAR ;
                 CDR ;
                 DIP 2 { DUP } ;
                 DIG 2 ;
                 CDR ;
                 DUP ;
                 PUSH nat 0 ;
                 PAIR ;
                 DIP 2 { DUP } ;
                 DIG 2 ;
                 DIP { DUP ;
                       NIL (pair (nat %block_height)
                                 (or %data (pair %depositedEvent address nat) (pair %submittedEvent nat string))) ;
                       SWAP ;
                       CONS ;
                       SOME ;
                       EMPTY_MAP
                         string
                         (list (pair (nat %block_height)
                                     (or %data (pair %depositedEvent address nat) (pair %submittedEvent nat string)))) ;
                       SWAP } ;
                 UPDATE ;
                 DIP 4 { DUP } ;
                 DIG 4 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 DIP { DUP ; SOME ; DIP { DIP 4 { DUP } ; DIG 4 ; CAR ; CDR ; CDR } } ;
                 UPDATE ;
                 DIP { DIP 4 { DUP } ;
                       DIG 4 ;
                       DUP ;
                       CDR ;
                       SWAP ;
                       CAR ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       CAR } ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 PAIR ;
                 DIP 5 { DROP } ;
                 DUG 4 ;
                 DIP 4 { DUP } ;
                 DIG 4 ;
                 DIP { DROP 6 ; DIP 7 { DUP } ; DIG 7 ; DROP } ;
                 DIP 8 { DROP } ;
                 DUG 7 ;
                 DIP 3 { DUP } ;
                 DIG 3 ;
                 DIP { DIP 7 { DUP } ; DIG 7 } ;
                 PAIR ;
                 DIP { DROP 11 } }
               { DIP 2 { DUP } ; DIG 2 ; NIL operation ; PAIR ; DIP { DROP } } ;
             DIP { DROP } }
           { DUP ;
             DIP { DIP { DUP } ; SWAP } ;
             PAIR ;
             DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CDR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CDR ;
             SOURCE ;
             COMPARE ;
             NEQ ;
             IF { PUSH string "source should be registered operator address" ; FAILWITH }
                { PUSH unit Unit } ;
             DROP ;
             DIP { DUP } ;
             SWAP ;
             DIP { DIP 2 { DUP } ; DIG 2 ; CAR ; CDR ; CAR ; PUSH nat 1 ; ADD } ;
             COMPARE ;
             NEQ ;
             IF { PUSH string "block_number should be next block" ; FAILWITH }
                { PUSH unit Unit } ;
             DROP ;
             DIP { DUP } ;
             SWAP ;
             DIP { DUP ; SOME ; DIP { DIP 2 { DUP } ; DIG 2 ; CAR ; CAR ; CDR } } ;
             UPDATE ;
             DIP { DIP 2 { DUP } ;
                   DIG 2 ;
                   DUP ;
                   CDR ;
                   SWAP ;
                   CAR ;
                   DUP ;
                   CDR ;
                   SWAP ;
                   CAR ;
                   CAR } ;
             SWAP ;
             PAIR ;
             PAIR ;
             PAIR ;
             DIP 3 { DROP } ;
             DUG 2 ;
             DIP { DUP } ;
             SWAP ;
             DIP { DIP 2 { DUP } ;
                   DIG 2 ;
                   DUP ;
                   CDR ;
                   SWAP ;
                   CAR ;
                   DUP ;
                   CAR ;
                   SWAP ;
                   CDR ;
                   CDR } ;
             PAIR ;
             SWAP ;
             PAIR ;
             PAIR ;
             DIP 3 { DROP } ;
             DUG 2 ;
             DIP { DUP } ;
             SWAP ;
             DIP { DUP } ;
             PAIR ;
             RIGHT (pair address nat) ;
             DIP 3 { DUP } ;
             DIG 3 ;
             PUSH string "BlockSubmitted" ;
             SWAP ;
             PAIR ;
             DIP { DUP } ;
             PAIR ;
             DUP ;
             CAR ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             CDR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CDR ;
             DUP ;
             PUSH nat 0 ;
             PAIR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             DIP { DUP ;
                   NIL (pair (nat %block_height)
                             (or %data (pair %depositedEvent address nat) (pair %submittedEvent nat string))) ;
                   SWAP ;
                   CONS ;
                   SOME ;
                   EMPTY_MAP
                     string
                     (list (pair (nat %block_height)
                                 (or %data (pair %depositedEvent address nat) (pair %submittedEvent nat string)))) ;
                   SWAP } ;
             UPDATE ;
             DIP 4 { DUP } ;
             DIG 4 ;
             CAR ;
             CDR ;
             CAR ;
             DIP { DUP ; SOME ; DIP { DIP 4 { DUP } ; DIG 4 ; CAR ; CDR ; CDR } } ;
             UPDATE ;
             DIP { DIP 4 { DUP } ;
                   DIG 4 ;
                   DUP ;
                   CDR ;
                   SWAP ;
                   CAR ;
                   DUP ;
                   CAR ;
                   SWAP ;
                   CDR ;
                   CAR } ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             PAIR ;
             DIP 5 { DROP } ;
             DUG 4 ;
             DIP 4 { DUP } ;
             DIG 4 ;
             DIP { DROP 6 ; DIP 3 { DUP } ; DIG 3 ; DROP } ;
             DIP 4 { DROP } ;
             DUG 3 ;
             DIP 3 { DUP } ;
             DIG 3 ;
             NIL operation ;
             PAIR ;
             DIP { DROP 7 } } ;
         DIP { DROP 2 } } }
